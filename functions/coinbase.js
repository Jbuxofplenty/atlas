
// Common packages
const functions = require('firebase-functions');
const bodyParser = require('body-parser');
const express = require('express');
const fetch = require("node-fetch");
const cors = require('cors');
const { db } = require('./admin');

/**
 * Submit an issue using Github's API
 *
 * All params are referenced from req.body
 * @param {string} title - Title for the issue
 * @param {string} body - Either the stack trace and props when the error occurred or input from the user
 * @param {bool} autoGenerated - True if sent automatically when error occurs in app
 * @param {string} label
 * 
 * @return {Object} {type, [data, error]}
 */
retrieveCryptoData = functions.pubsub.schedule('every 10 seconds').onRun((context) => {
  const apiUrl = 'https://api.coinbase.com/v2/exchange-rates';
  fetch(apiUrl, {
    method: 'GET',
  }).then(response => response.json()).then(async data => { 
    var now = (new Date()).getTime();
    db.collection("cryptoData").doc(now.toString()).set(data.data.rates);
    console.log("Success: ", snapshot)
  }).catch(error => {
    console.log(error);
  });
  return null;
});

/**
 * Sends crypto data to the requester.  The data is retrieved using a scheduled function from
 * Coinbase's API.
 *
 * All params are referenced from req.body
 * @param {string} ticker - Ticker symbol for the crypto data
 * @param {double} startTime - Start time for which data should be retrieved
 * @param {double} endTime - End time for which data should be retrieved
 * 
 * @return {Object} {type, [data, error]} - Returns an array of prices for the given ticker symbol
 */
var getCryptoPrice = express();

getCryptoPrice.use(bodyParser.json()) // for parsing application/json
getCryptoPrice.use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded

// Automatically allow cross-origin requests
getCryptoPrice.use(cors({ origin: true }));

getCryptoPrice.post('*', async (req, res) => {
  const apiUrl = 'https://api.coinbase.com/v2/exchange-rates';
  res.send({ type: 'success', apiUrl });
  // fetch(apiUrl, {
  //   method: 'GET',
  // }).then(response => response.json()).then(async data => { 
  //   var now = (new Date()).getTime();
  //   db.collection("cryptoData").doc(now.toString()).set(data.data.rates);
  // }).catch(error => {
  //   res.send({ type: 'apiFailure', error: error.message })
  // });
});

module.exports = {
  retrieveCryptoData,
  getCryptoPrice,
};
