
// Common packages
const functions = require('firebase-functions');
const { Octokit } = require("@octokit/rest");
const octokit = new Octokit({
  auth: functions.config().github.token,
});
const bodyParser = require('body-parser');
const express = require('express');
const cors = require('cors');
const { db } = require('./admin');

/**
 * Submit an issue using Github's API
 *
 * All params are referenced from req.body
 * @param {string} title - Title for the issue
 * @param {string} body - Either the stack trace and props when the error occurred or input from the user
 * @param {bool} autoGenerated - True if sent automatically when error occurs in app
 * @param {string} label
 * 
 * @return {Object} {type, [data, error]}
 */
var submitIssue = express();

submitIssue.use(bodyParser.json()) // for parsing application/json
submitIssue.use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded

// Automatically allow cross-origin requests
submitIssue.use(cors({ origin: true }));

submitIssue.post('*', async (req, res) => {
  const title = req.body.title;
  const body = req.body.body;
  const label = req.body.label;
  const autoGenerated = req.body.autoGenerated;
  // Assign labels to issue
  var labels = [label];
  if (autoGenerated) labels.push("auto-generated-bug")
  
  var unique = true;
  var success = await octokit.issues.listForRepo({
    owner: "jbuxofplenty",
    repo: "atlas",
  })
  .then(({ data }) => {
    for(i in data){
      if(data[i].title == title) {
        unique = false;
      }
    }
    return true;
  })
  .catch(function(error) {
    console.log("listing issues: ", error.message);
    res.send({ type: 'apiFailure', error: error.message });
    return false;
  });
  if(!success) return;
  if(!autoGenerated || unique) {
    octokit.issues.create({
      owner: "jbuxofplenty",
      repo: "atlas",
      title,
      body,
      labels
    })
    .then(({ data }) => {
      res.send({ type: 'success', data })
    })
    .catch(function(error) {
      console.log(error);
      res.send({ type: 'apiFailure', error: error.message })
    });
  }
  else {
    res.send({ type: 'success', data: 'Issue not created due to a similar issue existing in the database at this time.' });
  }
});


/**
 * Populate a 'while you were away' string. Retrieves commit messages between a date interval
 * to populate the string.  Updates user's lastWhileYouWereAway entry in there firestore records.
 *
 * All params are referenced from req.body
 * @param {number} uid - Firebase user id
 * @param {object} whileYouWereAway - Current while you were away settings for the specified user
 * 
 * @return {Object} {type, [data, error]}
 */
var whileYouWereAway = express();

whileYouWereAway.use(bodyParser.json()) // for parsing application/json
whileYouWereAway.use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded

// Automatically allow cross-origin requests
whileYouWereAway.use(cors({ origin: true }));

whileYouWereAway.post('*', async (req, res) => {
  const uid = req.body.uid;
  const now = new Date();
  const lastShownMilli = now.getTime();
  let whileYouWereAway = req.body.whileYouWereAway;
  let sinceDate = new Date(whileYouWereAway.lastShownMilli);
  let since = sinceDate.toISOString();
  whileYouWereAway.lastShownMilli = lastShownMilli;
  console.log(lastShownMilli);
  octokit.repos.listCommits({
      owner: "jbuxofplenty",
      repo: "atlas",
      since,
    })
  .then(({ data }) => {
    let commitMessages = [];
    for(var i in data) {
      var num = parseInt(i)+1;
      if(i < 5) commitMessages.push(`${num}. ` + data[i].commit.message);
    }
    console.log(commitMessages);
    if(commitMessages.length > 0) {
      db.collection("users").doc(uid).update({ whileYouWereAway });
    }
    res.send({ type: 'success', commitMessages })
  })
  .catch(function(error) {
    console.log(error);
    res.send({ type: 'apiFailure', error: error.message })
  });
});

module.exports = {
  submitIssue,
  whileYouWereAway,
};
